# Shared content
 
This file contains the SQL queries needed to create the shared content for the writing plugin.
Shared content means that the content is created by the community and is available to everyone and can be "finished" by the user (e.g. assignments).

Plugin: writing
shared content: assignments
custom columns: title, instructions, bulletpoints


create table public.pl_writing_assignment (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  created_by uuid null default auth.uid (),
  verified boolean null default false,
  topic text null,
  instructions text null,
  keywords json null,
  bulletpoints json null,
  constraint pl_writing_assignments_pkey primary key (id)
) TABLESPACE pg_default;

create policy "INSERT with verified=false"
on "public"."pl_writing_assignment"
as PERMISSIVE
for INSERT
    to authenticated
with check (true);

ALTER TABLE public.pl_writing_assignment ENABLE ROW LEVEL SECURITY;

create table public.pl_writing_assignment_result (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  user_id uuid null default auth.uid (),
  assignment_id uuid null,
  constraint pl_writing_assignment_result_pkey primary key (id)
) TABLESPACE pg_default;

ALTER TABLE public.pl_writing_assignment_result ENABLE ROW LEVEL SECURITY;

CREATE OR REPLACE FUNCTION pl_writing_assignment_entries(
    unread boolean,
    filter_column text DEFAULT NULL,
    filter_value text DEFAULT NULL
)
RETURNS TABLE(id uuid, topic text, instructions text, keywords json, bulletpoints json) AS $$
DECLARE
    filter_query text := '';
    allowed_columns text[] := ARRAY['id', 'topic', 'instructions']; -- Restricted list of allowed columns
BEGIN
    -- Ensure filter_column is one of the allowed values
    IF filter_column IS NOT NULL AND filter_value IS NOT NULL THEN
        IF filter_column = ANY(allowed_columns) THEN
            filter_query := format('AND a.%I = %L', filter_column, filter_value);
        ELSE
            RAISE EXCEPTION 'Invalid filter column: %', filter_column;
        END IF;
    END IF;

    -- Return unread assignments
    IF unread THEN
        RETURN QUERY EXECUTE format(
            'SELECT a.id, a.topic, a.instructions, a.keywords, a.bulletpoints
             FROM pl_writing_assignment a
             LEFT OUTER JOIN pl_writing_assignment_result r ON a.id = r.assignment_id
             WHERE r.id IS NULL %s
             ORDER BY RANDOM()
             LIMIT 3', filter_query);
    ELSE
        -- Return all assignments with results
        RETURN QUERY EXECUTE format(
            'SELECT a.id, a.topic, a.instructions, a.keywords, a.bulletpoints
             FROM pl_writing_assignment a
             INNER JOIN pl_writing_assignment_result r ON a.id = r.assignment_id
             WHERE TRUE %s', filter_query);
    END IF;
END;
$$ LANGUAGE plpgsql SECURITY INVOKER;

CREATE POLICY "Allow read verified=true entries for everyone" 
ON "public"."pl_writing_assignment"
AS PERMISSIVE
FOR SELECT
TO authenticated
USING ((verified = true));

CREATE POLICY "Handle own data" 
ON "public"."pl_writing_assignment_result"
AS PERMISSIVE
FOR ALL
TO authenticated
USING ((SELECT auth.uid() AS uid) = user_id);


CREATE OR REPLACE FUNCTION public.update_verified_before_insert()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.verified := true;  -- Force verified to be true before insert
    RETURN NEW;
END;
$function$;

CREATE TRIGGER set_verified_before_insert
BEFORE INSERT ON public.pl_writing_assignment
FOR EACH ROW
EXECUTE FUNCTION update_verified_before_insert();

ALTER POLICY "Prevent users from setting verified to true"
ON "public"."pl_writing_assignment"
TO public
USING (true)
WITH CHECK ((verified = false));

